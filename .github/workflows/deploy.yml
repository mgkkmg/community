# Workflow 이름은 구별이 가능할 정도로 자유롭게 적어주어도 된다. 
# 필수 옵션은 아니다.
name: CI-CD

# on 속성으로 main 브랜치에 PUSH 또는 PR 이벤트가 발생하면 Workflow가 실행된다.
on:
  push:
    branches:
      - main

permissions:
  contents: read

# 해당 Workflow의 Job 목록
jobs:
  # Job 이름으로, build 라는 이름으로 Job이 표시된다.
  build:
    # Runner가 실행되는 환경을 정의
    runs-on: ubuntu-latest
    
    # build Job 내의 step 목록
    steps:
    # uses 키워드를 통해 Action을 불러올 수 있다.
    # 해당 레포지토리로 check-out하여 레포지토리에 접근할 수 있는 Acion 불러오기
    - uses: actions/checkout@v3
    # jdk 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    # gradle 캐싱
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    # 암호파일 프로퍼티 설정
    - run: touch module-core/src/main/resources/application-secret.properties
    - run: echo "${{ secrets.APPLICATION_SECRET }}" > module-core/src/main/resources/application-secret.properties
    - run: cat module-core/src/main/resources/application-secret.properties
    
    # gradlew에 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      shell: bash
      
    # gradlew 빌드
    - name: Build with Gradle
      run: ./gradlew clean :module-api:buildNeeded --stacktrace --info --refresh-dependencies -x test
      shell: bash
    
    # docker build & push
    - name: Docker build & push
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }}/community-app .
          docker push ${{ secrets.DOCKER_REPO }}/community-app
          
    # docker deploy
    - name: Docker Deploy executing remote ssh commands using ssh_key
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          sudo rm concal.log
          sudo docker rm - f $(docker ps -qa)
          sudo docker pull ${{ secrets.DOCKER_REPO }}/community-app
          docker-compose up -d
          docker image prune -f

  # time
  current-time:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get Current Time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH:mm:ss
          utcOffset: "+09:00" # 기준이 UTC이기 때문에 한국시간인 KST를 맞추기 위해 +9시간 추가

      - name: Print Current Time
        run: echo "Current Time=${{steps.current-time.outputs.formattedTime}}" # current-time 에서 지정한 포맷대로 현재 시간 출력
        shell: bash
